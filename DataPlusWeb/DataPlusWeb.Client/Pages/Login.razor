@page "/login"
@layout EmptyLayout
@attribute [AllowAnonymous]

@using DataPlusWeb.Client.Provider;
@inject IUserService userService;
@inject NavigationManager navigationManager;
@inject IJSRuntime js;
@inject ILocalStorageService localStorageService;
@inject AuthenticationStateProvider authStateProvider;
@using Blazor.SubtleCrypto
@inject ICryptoService Crypto
@inject AlertService AlertService


<div class="row">
    <div class="col-md-6 offset-3">

        <div class="card-body">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center fw-bold text-primary">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary style="color:indianred" Model="@model" />
                        <div class="form-group">
                            <label for="name" class="form-label">Username</label>
                            <InputText id="name" @bind-Value="@model.Username" class="form-control"></InputText>
                            <ValidationMessage For="(() => model.Username)"></ValidationMessage>
                        </div>

                        <div class="form-group mt-2">
                            <label for="Password" class="form-label">Password</label>
                            <InputText type="password" id="Password" @bind-Value="model.Password" class="form-control"></InputText>
                            <ValidationMessage For="(() => model.Password)"></ValidationMessage>
                        </div>

                        <div class="form-group mt-2">
                            <button class="btn btn-outline-danger float-end" type="submit">
                                @if (loading)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Login</button>
                        </div>
                    </EditForm>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;

        if (user!.Identity!.IsAuthenticated)
            navigationManager.NavigateTo("/");
        else
            await base.OnInitializedAsync();
    }
    public LoginModel model = new LoginModel();
    private bool loading;

    public async Task HandleSubmit()
    {
        AlertService.Clear();
        loading = true;

        try
        {
            if (model is null)
                return;

            var result = await userService.LoginUser(model);
            if (result.Success)
            {
                CryptoResult encryptedUsername = await Crypto.EncryptAsync(result.Record.Username);
                CryptoResult encryptedRole = await Crypto.EncryptAsync(result.Record.Username.Contains("admin") ? "Admin" : "User");
                var newEncryptedUserSession = new UserSession() { Role = encryptedRole.Value, Username = encryptedUsername.Value, Token = result.Token };
                await localStorageService.SetItemAsync("UserData", newEncryptedUserSession);
                (authStateProvider as CustomAuthenticationStateProvider).NotifyAuthenticationState();
                navigationManager.NavigateTo("/", true);
            }
            else
            {
                throw new Exception(result.GetMessage());
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
